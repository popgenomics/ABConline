# general property
nmultilocus = 1000 # number of multilocus simulations per iteration (500)

# links to the codes
bin = "/shared/mfs/data/home/croux/softwares/ABConline/bin"

# model comparison
nCPU_R = 8 # number of CPUs for the model comp for the model forest R functions
ntree = 1000 # number of tree for the random forest (RF) model comparison
nIterations_model_comp = 10 # number of subdirectories for the simulations used in the RF model comparison
ITERATIONS_MODEL_COMP = range(nIterations_model_comp)
MODELS_COMP = ['SC_1M_1N', 'SC_1M_2N', 'SC_2M_1N', 'SC_2M_2N', 'AM_1M_1N', 'AM_1M_2N', 'AM_2M_1N', 'AM_2M_2N', 'IM_1M_1N', 'IM_1M_2N', 'IM_2M_1N', 'IM_2M_2N', 'SI_1N', 'SI_2N']

# first and second estimation of parameters
MODELS_ESTIM = ['IM_2M_2N'] #MODELS_ESTIM = ['SC_2M_2N', 'AM_2M_2N', 'IM_2M_2N', 'SI_2N', 'SI_1N']
nIterations_gof = 50 # number of subdirectories for the simulations used in the nnet param estimates (200)
nIterations_estim_1_3 = 1000 # number of subdirectories for the simulations used in the nnet param estimates (2000)
ITERATIONS_ESTIMATES_1_3 = range(nIterations_estim_1_3)
ITERATIONS_GOF = range(nIterations_gof)
nPosterior1 = 2000
nPosterior3 = 10000

# second estimation of parameters
nIterations_estim_2 = 100 # number of subdirectories for the simulations used in the nnet param estimates (2000)
ITERATIONS_ESTIMATES_2 = range(nIterations_estim_2)
ITERATIONS_GOF_2 = range(nIterations_gof)
nPosterior2 = 2000

# informations from the config.yaml file
mail_address = config['mail_address']
infile = config['infile']
region = config['region']
nspecies = config['nspecies']
nameA = config['nameA']
nameB = config['nameB']
nameOutgroup = config['nameOutgroup']
if nameOutgroup=='NA':
	outgroup=0
else:
	outgroup=1
config_yaml = config['config_yaml']
timeStamp = config['timeStamp']
population_growth = config['population_growth']
if population_growth=='constant':
	submit_simulations='submit_simulations_2pop.py'
	submit_simulations_gof='submit_simulations_gof_2pop.py'
else:
	submit_simulations='submit_simulations_2pop_popGrowth.py'
	submit_simulations_gof='submit_simulations_gof_2pop_popGrowth.py'
modeBarrier = config['modeBarrier']
max_N_tolerated = config['max_N_tolerated']
Lmin = config['Lmin']
nMin = config['nMin']
Nref = (config['N_max'] + config['N_min'])/2.0 # Nref is the mid point of the prior
mu = config['mu']
rho_over_theta = config['rho_over_theta']


rule targets:
	input:
		expand("{timeStamp}/distribution_PCA.txt", timeStamp=timeStamp),
		expand("{timeStamp}/bpfile", timeStamp=timeStamp),
		expand("{timeStamp}/Nref.txt", timeStamp=timeStamp),
		expand("{timeStamp}/config.yaml", timeStamp=timeStamp),
		expand("{timeStamp}/general_infos.txt", timeStamp=timeStamp),
		expand("{timeStamp}/{nameA}_{nameB}_infos.txt", timeStamp=timeStamp, nameA=nameA, nameB=nameB),
		expand("{timeStamp}/ABCstat_global.txt", timeStamp=timeStamp),
		expand("{timeStamp}/ABCstat_loci.txt", timeStamp=timeStamp),
		expand("{timeStamp}/ABCjsfs.txt", timeStamp=timeStamp),
		expand("{timeStamp}/sfs_plot.pdf", timeStamp=timeStamp),
		expand("{timeStamp}/sfs_table.txt", timeStamp=timeStamp),
		expand("{timeStamp}/results_recombination.txt", timeStamp=timeStamp),
		expand("{timeStamp}/modelComp/report_{nameA}_{nameB}.txt", timeStamp=timeStamp, nameA=nameA, nameB=nameB),
		expand("{timeStamp}/modelComp/best_model.txt", timeStamp=timeStamp),
		expand("{timeStamp}/modelComp/hierarchical_models.txt", timeStamp=timeStamp),
		expand("{timeStamp}/modelComp/locus_specific_modelComp.txt", timeStamp=timeStamp),
		expand("{timeStamp}/estim/report_{nameA}_{nameB}.txt", timeStamp=timeStamp, nameA=nameA, nameB=nameB),
		expand("{timeStamp}/best_model/report_{nameA}_{nameB}.txt", timeStamp=timeStamp, nameA=nameA, nameB=nameB),
		expand("{timeStamp}/best_model/posterior_bestModel.txt", timeStamp=timeStamp),
		expand("{timeStamp}/best_model/posterior_bestModel.pdf", timeStamp=timeStamp),
		expand("{timeStamp}/gof/goodness_of_fit_test.txt", timeStamp=timeStamp),
		expand("{timeStamp}/gof/gof_sfs.txt", timeStamp=timeStamp),
#		expand("{timeStamp}/best_model_2/report_{nameA}_{nameB}.txt", timeStamp=timeStamp, nameA=nameA, nameB=nameB),
		expand("{timeStamp}/best_model_2/posterior_bestModel.txt", timeStamp=timeStamp),
#		expand("{timeStamp}/best_model_2/posterior_bestModel.pdf", timeStamp=timeStamp),
		expand("{timeStamp}/gof_2/goodness_of_fit_test.txt", timeStamp=timeStamp),
		expand("{timeStamp}/gof_2/gof_sfs.txt", timeStamp=timeStamp),
		expand("{timeStamp}/best_model_3/posterior_bestModel.txt", timeStamp=timeStamp)
	shell:
		"""
		tar -zcvf {timeStamp}.tar.gz {input}
		touch slurm_tmp.out
		rm slurm*out
#		rm -rf {timeStamp}		
		"""


rule fasta2ABC_2pops:
	# pypy fasta2ABC_2pops.py ../../all_loci.fasta txn mal num coding 250 0.007 12 100000 0.000000003 1
	params:
		nameA={nameA},
		nameB={nameB},
		nameOutgroup={nameOutgroup},
		region={region},
		Lmin={Lmin},
		max_N_tolerated={max_N_tolerated},
		nMin={nMin},
		Nref={Nref},
		mu={mu},
		rho_over_theta={rho_over_theta}
	input:
		expand("{infile}", infile=infile)
	output:
		expand("{timeStamp}/general_infos.txt", timeStamp=timeStamp),
		expand("{timeStamp}/ABCjsfs.txt", timeStamp=timeStamp),
		expand("{timeStamp}/ABCstat_global.txt", timeStamp=timeStamp),
		expand("{timeStamp}/ABCstat_loci.txt", timeStamp=timeStamp),
		expand("{timeStamp}/bpfile", timeStamp=timeStamp),
		expand("{timeStamp}/nLoci.txt", timeStamp=timeStamp),
		expand("{timeStamp}/{nameA}_{nameB}_infos.txt", timeStamp=timeStamp, nameA=nameA, nameB=nameB),
		expand("{timeStamp}/{nameA}_{nameB}.ms", timeStamp=timeStamp, nameA=nameA, nameB=nameB),
		expand("{timeStamp}/Nref.txt", timeStamp=timeStamp),
		expand("{timeStamp}/config.yaml", timeStamp=timeStamp)
	threads: 8
	shell:
		"""
#		module load conda;
#		module load pypy/2.7-5.10.0;
#		module load python/2.7;
#		source activate R_env;
#		module load pandoc/2.7.2;
		x=$(date)
		{bin}/fasta2ABC_2pops.py {infile} {timeStamp} {params.nameA} {params.nameB} {params.nameOutgroup} {params.region} {params.Lmin} {params.max_N_tolerated} {params.nMin} {params.Nref} {params.mu} {params.rho_over_theta}
		echo "nSpecies,"{nspecies}>{timeStamp}/general_infos.txt
		echo "nameA,"{nameA}>>{timeStamp}/general_infos.txt
		echo "nameB,"{nameB}>>{timeStamp}/general_infos.txt
		y=$( cat {timeStamp}/nLoci.txt )
		echo "nLoci,"${{y}}>>{timeStamp}/general_infos.txt
		echo "mail,"{mail_address}>>{timeStamp}/general_infos.txt
		echo "date,"${{x}}>>{timeStamp}/general_infos.txt
		echo {params.Nref}>>{timeStamp}/Nref.txt
		cp {config_yaml} {timeStamp}/config.yaml
		"""


rule RNAseqFGT:
	params:
		nameA={nameA},
		nameB={nameB}
	input:
		infos=expand("{timeStamp}/{nameA}_{nameB}_infos.txt", timeStamp=timeStamp, nameA=nameA, nameB=nameB),
		fasta=expand("{infile}", infile=infile),
		nLoci=expand("{timeStamp}/nLoci.txt", timeStamp=timeStamp),
	output:
		expand("{timeStamp}/results_recombination.txt", timeStamp=timeStamp)
	threads: 1
	shell:	
		"""
		x=$(cat {input.infos}  | grep -v locusName | awk '{{print $2}}' | sort -n | tail -n1)
		if (($x<99990)); then
			{bin}/RNAseqFGT {input.fasta} {output}
		else
			echo "{input.fasta} not in correct FASTA format (line length > 100000)" > {output}
		fi
		"""


rule simulationsModelComp:
	params:
		nmultilocus={nmultilocus}
	input:
		"{timeStamp}/bpfile",
		"{timeStamp}/nLoci.txt"
	output:
		"{timeStamp}/modelComp/{model}_{i}/bpfile",
		"{timeStamp}/modelComp/{model}_{i}/priorfile.txt",
		"{timeStamp}/modelComp/{model}_{i}/ABCstat.txt"
	threads: 1
	shell:
		"""
		{bin}/{submit_simulations} {outgroup} {params.nmultilocus} {wildcards.i} {wildcards.model} {nameA} {nameB} modelComp {wildcards.model} {config_yaml} {timeStamp} {modeBarrier}
		"""

rule simulationsEstim:
	params:
		nmultilocus={nmultilocus}
	input:
		"{timeStamp}/bpfile",
		"{timeStamp}/nLoci.txt"
	output:
		"{timeStamp}/estim/{model}_{i}/bpfile",
		"{timeStamp}/estim/{model}_{i}/priorfile.txt",
		"{timeStamp}/estim/{model}_{i}/ABCstat.txt"
	threads: 1
	shell:
		"""
		{bin}/{submit_simulations} {outgroup} {params.nmultilocus} {wildcards.i} {wildcards.model} {nameA} {nameB} estim  {wildcards.model} {config_yaml} {timeStamp} {modeBarrier}
		"""


rule modelComparison:
	params:
		nameOutgroup={nameOutgroup}
	input:
		expand("{timeStamp}/estim/posterior_IM_2M_2N.txt", timeStamp=timeStamp),
		expand("{timeStamp}/ABCstat_global.txt", timeStamp=timeStamp),
		expand("{timeStamp}/ABCstat_loci.txt", timeStamp=timeStamp),
		expand("{timeStamp}/modelComp/{model}_{i}/ABCstat.txt", timeStamp=timeStamp, model=MODELS_COMP, i=ITERATIONS_MODEL_COMP)
	output:
		expand("{timeStamp}/modelComp/report_{nameA}_{nameB}.txt", timeStamp=timeStamp, nameA=nameA, nameB=nameB),
		expand("{timeStamp}/modelComp/locus_specific_modelComp.txt", timeStamp=timeStamp),
		expand("{timeStamp}/modelComp/best_model.txt", timeStamp=timeStamp),
		expand("{timeStamp}/modelComp/hierarchical_models.txt", timeStamp=timeStamp),
		expand("{timeStamp}/sfs_plot.pdf", timeStamp=timeStamp),
		expand("{timeStamp}/sfs_table.txt", timeStamp=timeStamp)
	threads: nCPU_R
	shell:
		"""
#		module load conda
#		source activate R_env
		{bin}/model_comp_2pop_allModels.R nameA={nameA} nameB={nameB} timeStamp={timeStamp} nMin={nMin} sub_dir_sim=modelComp nSubdir={nIterations_model_comp} ntree={ntree} ncores={nCPU_R} outgroup={outgroup} population_growth={population_growth} modeBarrier={modeBarrier}
		"""

rule estimation:
	input:
		expand("{timeStamp}/ABCstat_global.txt", timeStamp=timeStamp),
		expand("{timeStamp}/estim/{model}_{i}/ABCstat.txt", timeStamp=timeStamp, model=MODELS_ESTIM, i=ITERATIONS_ESTIMATES_1_3)
	output:
		expand("{timeStamp}/estim/report_{nameA}_{nameB}.txt", timeStamp=timeStamp, nameA=nameA, nameB=nameB),
		expand("{timeStamp}/estim/posterior_IM_2M_2N.txt", timeStamp=timeStamp)
	threads: nCPU_R
	shell:
		"""
		{bin}/estimates_2pop.R Nref={Nref} nameA={nameA} nameB={nameB} timeStamp={timeStamp} nMin={nMin} sub_dir_sim=estim nSubdir={nIterations_estim_1_3} ntree={ntree} ncores={nCPU_R} outgroup={outgroup} nPosterior={nPosterior1} bin={bin}
		"""

rule simulation_best_model:
	params:
		nmultilocus={nmultilocus}
	input:
		best="{timeStamp}/modelComp/best_model.txt",
		bpfile="{timeStamp}/bpfile",
		nLoci="{timeStamp}/nLoci.txt",
	output:
		"{timeStamp}/best_model/best_model_{i}/priorfile.txt",
		"{timeStamp}/best_model/best_model_{i}/ABCstat.txt"
	threads: 1
	shell:
		"""
		best_model=$(cat {input.best})
		{bin}/{submit_simulations} {outgroup} {params.nmultilocus} {wildcards.i} ${{best_model}} {nameA} {nameB} best_model best_model {config_yaml} {timeStamp} {modeBarrier}
		"""


rule estimation_best_model:
	input:
		best=expand("{timeStamp}/modelComp/best_model.txt", timeStamp=timeStamp),
		obs=expand("{timeStamp}/ABCstat_global.txt", timeStamp=timeStamp),
		simulations=expand("{timeStamp}/best_model/best_model_{i}/ABCstat.txt", timeStamp=timeStamp, i=ITERATIONS_ESTIMATES_1_3)
	output:
		expand("{timeStamp}/best_model/report_{nameA}_{nameB}.txt", timeStamp=timeStamp, nameA=nameA, nameB=nameB),
		expand("{timeStamp}/best_model/posterior_bestModel.txt", timeStamp=timeStamp),
		expand("{timeStamp}/best_model/posterior_bestModel.pdf", timeStamp=timeStamp)
	threads: nCPU_R
	shell:
		"""
		best_model=$(cat {input.best})
		{bin}/estimates_2pop_best.R Nref={Nref} nameA={nameA} nameB={nameB} nMin={nMin} sub_dir_sim=best_model nSubdir={nIterations_estim_1_3} ntree={ntree} ncores={nCPU_R} outgroup={outgroup} bestModel=${{best_model}} timeStamp={timeStamp} nPosterior={nPosterior2} bin={bin}
		"""


rule simulation_gof:
	params:
		nmultilocus={nmultilocus}
	input:
		best="{timeStamp}/modelComp/best_model.txt",
		posterior="{timeStamp}/best_model/posterior_bestModel.txt"
	output:
		"{timeStamp}/gof/gof_{i}/ABCstat.txt"
	shell:
		"""
		best_model=$(cat {input.best})
		{bin}/{submit_simulations_gof} {outgroup} {params.nmultilocus} {wildcards.i} ${{best_model}} {nameA} {nameB} gof gof ${{PWD}}/{input.posterior} {timeStamp} {modeBarrier} joint
		"""


rule gof:
	input:
		expand("{timeStamp}/ABCstat_global.txt", timeStamp=timeStamp),
		expand("{timeStamp}/ABCjsfs.txt", timeStamp=timeStamp),
		expand("{timeStamp}/gof/gof_{i}/ABCstat.txt", timeStamp=timeStamp, i=ITERATIONS_GOF)
	output:
		"{timeStamp}/gof/goodness_of_fit_test.txt",
		"{timeStamp}/gof/gof_sfs.txt"
	shell:
		"""
		head -n1 {timeStamp}/gof/gof_0/ABCstat.txt > {timeStamp}/gof/simulations.txt
		cat {timeStamp}/gof/gof*/ABCstat.txt | grep -v avg >> {timeStamp}/gof/simulations.txt
		
		head -n1 {timeStamp}/gof/gof_0/ABCjsfs.txt > {timeStamp}/gof/simulations_jsfs.txt
		cat {timeStamp}/gof/gof*/ABCjsfs.txt | grep -v fA >> {timeStamp}/gof/simulations_jsfs.txt
		
		{bin}/gof_2pop.R timeStamp={timeStamp} sub_dir=gof nIterations_gof={nIterations_gof} writeDistribution=FALSE
		"""


# Second estimation of parameters
rule simulation_best_model_2:
	params:
		nmultilocus={nmultilocus}
	input:
		best="{timeStamp}/modelComp/best_model.txt",
		posterior="{timeStamp}/best_model/posterior_bestModel.txt"
	output:
		"{timeStamp}/best_model_2/best_model_{i}/ABCstat.txt"
	shell:
		"""
		best_model=$(cat {input.best})
		{bin}/{submit_simulations_gof} {outgroup} {params.nmultilocus} {wildcards.i} ${{best_model}} {nameA} {nameB} best_model_2 best_model ${{PWD}}/{input.posterior} {timeStamp} {modeBarrier} joint
		"""

rule estimation_best_model_2:
	input:
		best=expand("{timeStamp}/modelComp/best_model.txt", timeStamp=timeStamp),
		obs=expand("{timeStamp}/ABCstat_global.txt", timeStamp=timeStamp),
		simulations=expand("{timeStamp}/best_model_2/best_model_{i}/ABCstat.txt", timeStamp=timeStamp, i=ITERATIONS_ESTIMATES_2)
	output:
#		expand("{timeStamp}/best_model_2/report_{nameA}_{nameB}.txt", timeStamp=timeStamp, nameA=nameA, nameB=nameB),
		expand("{timeStamp}/best_model_2/posterior_bestModel.txt", timeStamp=timeStamp)
#		expand("{timeStamp}/best_model_2/posterior_bestModel.pdf", timeStamp=timeStamp)
	threads: nCPU_R
	shell:
		"""
		best_model=$(cat {input.best})
		{bin}/estimates_2pop_best.R Nref={Nref} nameA={nameA} nameB={nameB} nMin={nMin} sub_dir_sim=best_model_2 nSubdir={nIterations_estim_2} ntree={ntree} ncores={nCPU_R} outgroup={outgroup} bestModel=${{best_model}} timeStamp={timeStamp} nPosterior={nPosterior2} bin={bin}
		"""

# third estimation of parameters
rule simulation_best_model_3:
	params:
		nmultilocus={nmultilocus}
	input:
		best="{timeStamp}/modelComp/best_model.txt",
		posterior="{timeStamp}/best_model_2/posterior_bestModel.txt"
	output:
		"{timeStamp}/best_model_3/best_model_{i}/ABCstat.txt"
	shell:
		"""
		best_model=$(cat {input.best})
		{bin}/{submit_simulations_gof} {outgroup} {params.nmultilocus} {wildcards.i} ${{best_model}} {nameA} {nameB} best_model_3 best_model ${{PWD}}/{input.posterior} {timeStamp} {modeBarrier} randomBeta
		"""

rule estimation_best_model_3:
	input:
		best=expand("{timeStamp}/modelComp/best_model.txt", timeStamp=timeStamp),
		obs=expand("{timeStamp}/ABCstat_global.txt", timeStamp=timeStamp),
		simulations=expand("{timeStamp}/best_model_3/best_model_{i}/ABCstat.txt", timeStamp=timeStamp, i=ITERATIONS_ESTIMATES_1_3)
	output:
#		expand("{timeStamp}/best_model_2/report_{nameA}_{nameB}.txt", timeStamp=timeStamp, nameA=nameA, nameB=nameB),
		expand("{timeStamp}/best_model_3/posterior_bestModel.txt", timeStamp=timeStamp)
#		expand("{timeStamp}/best_model_2/posterior_bestModel.pdf", timeStamp=timeStamp)
	threads: nCPU_R
	shell:
		"""
		best_model=$(cat {input.best})
		{bin}/estimates_2pop_best.R Nref={Nref} nameA={nameA} nameB={nameB} nMin={nMin} sub_dir_sim=best_model_3 nSubdir={nIterations_estim_1_3} ntree={ntree} ncores={nCPU_R} outgroup={outgroup} bestModel=${{best_model}} timeStamp={timeStamp} nPosterior={nPosterior3} bin={bin}
		"""

# second goodness of fit test from the third estimates
rule simulation_gof_2:
	# made after the third estimation of parameters
	params:
		nmultilocus={nmultilocus}
	input:
		best="{timeStamp}/modelComp/best_model.txt",
		posterior="{timeStamp}/best_model_3/posterior_bestModel.txt"
	output:
		"{timeStamp}/gof_2/gof_{i}/ABCstat.txt"
	shell:
		"""
		best_model=$(cat {input.best})
		{bin}/{submit_simulations_gof} {outgroup} {params.nmultilocus} {wildcards.i} ${{best_model}} {nameA} {nameB} gof_2 gof ${{PWD}}/{input.posterior} {timeStamp} {modeBarrier} joint
		"""

rule gof_2:
	input:
		expand("{timeStamp}/ABCstat_global.txt", timeStamp=timeStamp),
		expand("{timeStamp}/ABCjsfs.txt", timeStamp=timeStamp),
		expand("{timeStamp}/gof_2/gof_{i}/ABCstat.txt", timeStamp=timeStamp, i=ITERATIONS_GOF)
	output:
		"{timeStamp}/distribution_PCA.txt",
		"{timeStamp}/gof_2/goodness_of_fit_test.txt",
		"{timeStamp}/gof_2/gof_sfs.txt"
	shell:
		"""
		head -n1 {timeStamp}/gof_2/gof_0/ABCstat.txt > {timeStamp}/gof_2/simulations.txt
		cat {timeStamp}/gof_2/gof*/ABCstat.txt | grep -v avg >> {timeStamp}/gof_2/simulations.txt
		
		head -n1 {timeStamp}/gof_2/gof_0/ABCjsfs.txt > {timeStamp}/gof_2/simulations_jsfs.txt
		cat {timeStamp}/gof_2/gof*/ABCjsfs.txt | grep -v fA >> {timeStamp}/gof_2/simulations_jsfs.txt
		
		{bin}/gof_2pop.R timeStamp={timeStamp} sub_dir=gof_2 nIterations_gof={nIterations_gof} writeDistribution=TRUE
		"""

