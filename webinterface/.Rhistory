shiny::runApp('~/Documents/tmp/shiny')
runApp('~/Documents/tmp/shiny')
ui = shinyUI(
## **fastABC**
```{r echo = F,message=FALSE}
library(ggplot2)
require(gridExtra)
fluidPage(
titlePanel("Email address"),
fluidRow(
column(width=3, textInput("mail_address", label = NULL, value = "user@gmail.com"))
)
)
fluidPage(
titlePanel("Dataset configurator"),
fluidRow(column(11,
wellPanel(
titlePanel("Input alignment file"),
fileInput("infile", label = NULL),
hr(),
fluidRow(column(4, verbatimTextOutput("value"))),
radioButtons("region", label = h3("Analyzed genomic regions"), choices = list("coding" = "coding", "non coding" = "noncoding"), selected = "noncoding"),
hr(),
radioButtons("nspecies", label = h3("Number of gene pools"), choices = list("One gene pool" = 1, "Two gene pools" = 2, "Four gene pools" = 4), selected = 2),
radioButtons("Outgroup", label = h3("Presence of an outgroup"), choices = list("yes" = "outgroup", "no" = "noOutgroup"), selected = "noOutgroup"),
hr(),
fluidRow(
column(width=4, textInput("nameA", label = NULL, value = "name of species A")),
column(width=4, textInput("nameB", label = NULL, value = "name of species B"))
),
fluidRow(
column(width=4, textInput("nameOutgroup", label = NULL, value = "name of the outgroup"))
),
hr(),
fluidRow(
sliderInput("max_N_tolerated", label = h4("Maximum proportion of positions containing a N above which a sequence is removed from the analysis"), min = 0, max = 1, value = 0.1, step = 0.005)
),
fluidRow(
numericInput("Lmin", label = h4("Minimum number of treatable positions (i.e., without a single N in the position alignment) below which the locus is not considered"), value = 30)
),
fluidRow(
numericInput("nMin", label = h4("Minimum number of individuals per species required to consider a locus"), value = 12)
)
)
)
)
)
fluidPage(
titlePanel("Simulations configurator"),
fluidRow(column(11,
wellPanel(
h3("Mutation and recombination"),
fluidRow(
column(width=5, numericInput("mu", label = h5('Mutation rate (/bp /generation)'), value = 0.000000003)),
column(width=5, numericInput("rho_over_theta", label = h5('Ratio r/µ'), value = 0.1))
),
hr(),
h3("Prior distributions"),
fluidRow(h4("Effective population sizes (# of diploid individuals)"),
column(width=3, numericInput("N_min", label = h5('min'), value = 100)),
column(width=3, numericInput("N_max", label = h5('max'), value = 1000000))
),
fluidRow(h4("Time of speciation (# of generations)"),
column(width=3, numericInput("Tsplit_min", label = h5('min'), value = 100)),
column(width=3, numericInput("Tsplit_max", label = h5('max'), value = 1000000))
),
fluidRow(h4("Migration rates (4.N.m per generation)"),
column(width=3, numericInput("M_min", label = h5('min'), value = 0.4)),
column(width=3, numericInput("M_max", label = h5('max'), value = 20))
)
)
)
)
)
fluidPage(
titlePanel("Are you ready?"),
actionButton("action", label = "Run the ABC", width = 600),
hr(),
fluidRow(column(2, verbatimTextOutput("value")))
)
## plot
library(plotly)
library(viridis)
x = read.table("/home/croux/Documents/fastABC/popPhyl.txt", h=T)
col = c(grey(0.25), 'turquoise', 'purple', 'red')
pmig_HH = x$Pongoing_migration_Mhetero_Nhetero
proba_migration = pmig_HH
seuil1 = 0.6419199
seuil2 = 0.1304469
model = rep('ambiguous', nrow(x))
model[which(x$Pongoing_migration_Mhetero_Nhetero>=seuil1)] = "migration"
model[which(x$Pongoing_migration_Mhetero_Nhetero<seuil2)] = "isolation"
divergence = log10(x$netdivAB_avg)
piA = round(x$piA_avg, 5)
piB = round(x$piB_avg, 5)
pattern=c("Mhetero_Nhetero", "Hetero")
selectedCol = which(Reduce('&', lapply(pattern, grepl, colnames(x))))
status = rep('ambiguous', nrow(x))
heteroM = apply(x[, selectedCol], FUN="sum", MARGIN=1)
status[which(pmig_HH>= seuil1 & heteroM >= seuil1)] = "semi-isolated species"
status[which(pmig_HH>= seuil1 & heteroM < seuil1)] = "populations"
status[which(pmig_HH<= seuil2)] = "species"
species_A = x$spA
species_B = x$spB
author = rep('camille.roux@univ-lille.fr', length(species_A))
res = data.frame(divergence, model, status, proba_migration, species_A, species_B, piA, piB, author)
f=list(
family = "Arial",
size = 26,
color = "black"
)
f2=list(
family = "Arial",
size = 20,
color = "black"
)
f_legend=list(
family = "Arial",
size = 20,
color = "black",
color = "#000"
)
xlab = list(title='divergence (log10)',
titlefont=f,
tickfont=f2,
tickvals=c(0, -1, -2, -3, -4, -5),
ticktext=c(1, 0.1, 0.01, 0.001, 0.0001, 0.00001)
)
ylab = list(title='probability of ongoing migration',
titlefont=f,
tickfont=f2
)
p=plot_ly(data=res, x=~divergence, y=~proba_migration, color=~status, colors=col, marker=list(size=20),
text = ~paste("species A: ", species_A, '<br>species B: ', species_B, "<br>net neutral divergence: ",
round(10**divergence, 5), "<br>Probability of migration: ", round(proba_migration, 3),
'<br>piA: ', piA, '<br>piB: ', piB, '<br><br>author: ', author),
hoverinfo='text', width=1100, height=630) %>% layout(xaxis=xlab, yaxis=ylab,
legend=list(orientation = 'h', y=1.05, font=f_legend))
p
```
)
server = shinyServer(function(input, output){
print('genial')
}
shinyApp(ui, server)
library(shiny)
ui = shinyUI(
## **fastABC**
```{r echo = F,message=FALSE}
library(ggplot2)
require(gridExtra)
fluidPage(
titlePanel("Email address"),
fluidRow(
column(width=3, textInput("mail_address", label = NULL, value = "user@gmail.com"))
)
)
fluidPage(
titlePanel("Dataset configurator"),
fluidRow(column(11,
wellPanel(
titlePanel("Input alignment file"),
fileInput("infile", label = NULL),
hr(),
fluidRow(column(4, verbatimTextOutput("value"))),
radioButtons("region", label = h3("Analyzed genomic regions"), choices = list("coding" = "coding", "non coding" = "noncoding"), selected = "noncoding"),
hr(),
radioButtons("nspecies", label = h3("Number of gene pools"), choices = list("One gene pool" = 1, "Two gene pools" = 2, "Four gene pools" = 4), selected = 2),
radioButtons("Outgroup", label = h3("Presence of an outgroup"), choices = list("yes" = "outgroup", "no" = "noOutgroup"), selected = "noOutgroup"),
hr(),
fluidRow(
column(width=4, textInput("nameA", label = NULL, value = "name of species A")),
column(width=4, textInput("nameB", label = NULL, value = "name of species B"))
),
fluidRow(
column(width=4, textInput("nameOutgroup", label = NULL, value = "name of the outgroup"))
),
hr(),
fluidRow(
sliderInput("max_N_tolerated", label = h4("Maximum proportion of positions containing a N above which a sequence is removed from the analysis"), min = 0, max = 1, value = 0.1, step = 0.005)
),
fluidRow(
numericInput("Lmin", label = h4("Minimum number of treatable positions (i.e., without a single N in the position alignment) below which the locus is not considered"), value = 30)
),
fluidRow(
numericInput("nMin", label = h4("Minimum number of individuals per species required to consider a locus"), value = 12)
)
)
)
)
)
fluidPage(
titlePanel("Simulations configurator"),
fluidRow(column(11,
wellPanel(
h3("Mutation and recombination"),
fluidRow(
column(width=5, numericInput("mu", label = h5('Mutation rate (/bp /generation)'), value = 0.000000003)),
column(width=5, numericInput("rho_over_theta", label = h5('Ratio r/µ'), value = 0.1))
),
hr(),
h3("Prior distributions"),
fluidRow(h4("Effective population sizes (# of diploid individuals)"),
column(width=3, numericInput("N_min", label = h5('min'), value = 100)),
column(width=3, numericInput("N_max", label = h5('max'), value = 1000000))
),
fluidRow(h4("Time of speciation (# of generations)"),
column(width=3, numericInput("Tsplit_min", label = h5('min'), value = 100)),
column(width=3, numericInput("Tsplit_max", label = h5('max'), value = 1000000))
),
fluidRow(h4("Migration rates (4.N.m per generation)"),
column(width=3, numericInput("M_min", label = h5('min'), value = 0.4)),
column(width=3, numericInput("M_max", label = h5('max'), value = 20))
)
)
)
)
)
fluidPage(
titlePanel("Are you ready?"),
actionButton("action", label = "Run the ABC", width = 600),
hr(),
fluidRow(column(2, verbatimTextOutput("value")))
)
## plot
library(plotly)
library(viridis)
x = read.table("/home/croux/Documents/fastABC/popPhyl.txt", h=T)
col = c(grey(0.25), 'turquoise', 'purple', 'red')
pmig_HH = x$Pongoing_migration_Mhetero_Nhetero
proba_migration = pmig_HH
seuil1 = 0.6419199
seuil2 = 0.1304469
model = rep('ambiguous', nrow(x))
model[which(x$Pongoing_migration_Mhetero_Nhetero>=seuil1)] = "migration"
model[which(x$Pongoing_migration_Mhetero_Nhetero<seuil2)] = "isolation"
divergence = log10(x$netdivAB_avg)
piA = round(x$piA_avg, 5)
piB = round(x$piB_avg, 5)
pattern=c("Mhetero_Nhetero", "Hetero")
selectedCol = which(Reduce('&', lapply(pattern, grepl, colnames(x))))
status = rep('ambiguous', nrow(x))
heteroM = apply(x[, selectedCol], FUN="sum", MARGIN=1)
status[which(pmig_HH>= seuil1 & heteroM >= seuil1)] = "semi-isolated species"
status[which(pmig_HH>= seuil1 & heteroM < seuil1)] = "populations"
status[which(pmig_HH<= seuil2)] = "species"
species_A = x$spA
species_B = x$spB
author = rep('camille.roux@univ-lille.fr', length(species_A))
res = data.frame(divergence, model, status, proba_migration, species_A, species_B, piA, piB, author)
f=list(
family = "Arial",
size = 26,
color = "black"
)
f2=list(
family = "Arial",
size = 20,
color = "black"
)
f_legend=list(
family = "Arial",
size = 20,
color = "black",
color = "#000"
)
xlab = list(title='divergence (log10)',
titlefont=f,
tickfont=f2,
tickvals=c(0, -1, -2, -3, -4, -5),
ticktext=c(1, 0.1, 0.01, 0.001, 0.0001, 0.00001)
)
ylab = list(title='probability of ongoing migration',
titlefont=f,
tickfont=f2
)
p=plot_ly(data=res, x=~divergence, y=~proba_migration, color=~status, colors=col, marker=list(size=20),
text = ~paste("species A: ", species_A, '<br>species B: ', species_B, "<br>net neutral divergence: ",
round(10**divergence, 5), "<br>Probability of migration: ", round(proba_migration, 3),
'<br>piA: ', piA, '<br>piB: ', piB, '<br><br>author: ', author),
hoverinfo='text', width=1100, height=630) %>% layout(xaxis=xlab, yaxis=ylab,
legend=list(orientation = 'h', y=1.05, font=f_legend))
p
```
)
server = shinyServer(function(input, output){
print('genial')
}
shinyApp(ui, server)
runApp('~/test')
runApp('~/test')
shinyApp(ui = ui2, server = server2)
# Define UI for application that draws a histogram
ui2 <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server2 <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui2, server = server2)
x
shiny::runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
runApp('~/Documents/fastABC/fastABC')
