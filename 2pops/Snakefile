nmultilocus = 500 # number of multilocus simulations per iteration
nIterations_model_comp = 6 # number of subdirectories for the simulations used in the RF model comparison
nIterations_estim = 1000 # number of subdirectories for the simulations used in the nnet param estimates
nIterations_gof = 100 # number of subdirectories for the simulations used in the nnet param estimates
nCPU_R = 8 # number of CPUs for the model comp for the model forest R functions
ntree = 1000 # number of tree for the random forest (RF) model comparison


MODELS_COMP = ['SC_1M_1N', 'SC_1M_2N', 'SC_2M_1N', 'SC_2M_2N', 'AM_1M_1N', 'AM_1M_2N', 'AM_2M_1N', 'AM_2M_2N', 'IM_1M_1N', 'IM_1M_2N', 'IM_2M_1N', 'IM_2M_2N', 'SI_1N', 'SI_2N']
#MODELS_ESTIM = ['SC_2M_2N', 'AM_2M_2N', 'IM_2M_2N', 'SI_2N', 'SI_1N']
MODELS_ESTIM = ['IM_2M_2N']
ITERATIONS_MODEL_COMP = range(nIterations_model_comp)
ITERATIONS_ESTIMATES = range(nIterations_estim)
ITERATIONS_GOF = range(nIterations_gof)


nspecies = config['nspecies']
config_yaml = config['config_yaml']
infile = config['infile']
region = config['region']
nameA = config['nameA']
nameB = config['nameB']
nameOutgroup = config['nameOutgroup']
if nameOutgroup=='NA':
	outgroup=0
else:
	outgroup=1
max_N_tolerated = config['max_N_tolerated']
Lmin = config['Lmin']
nMin = config['nMin']
Nref = (config['N_max'] + config['N_min'])/2.0 # Nref is the mid point of the prior
mu = config['mu']
rho_over_theta = config['rho_over_theta']


rule targets:
	input:
		expand("ABC_{nameA}_{nameB}/ABCstat_global.txt", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/ABCstat_loci.txt", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/{nameA}_{nameB}_infos.txt", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/results_recombination.txt", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/modelComp/report_{nameA}_{nameB}.txt", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/modelComp/best_model.txt", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/modelComp/locus_specific_modelComp.txt", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/estim/report_{nameA}_{nameB}.txt", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/best_model/report_{nameA}_{nameB}.txt", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/best_model/posterior_bestModel.txt", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/best_model/posterior_bestModel.pdf", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/estim/posterior_IM_2M_2N.txt", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/estim/posterior_IM_2M_2N.pdf", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/gof/goodness_of_fit_test.txt", nameA=nameA, nameB=nameB)
	shell:
		"""
		tar -zcvf results_{nameA}_{nameB}.tar.gz {input}
		rm slurm*out
		rm -rf ABC_{nameA}_{nameB}		
		"""

rule fasta2ABC_2pops:
	# fasta2ABC_2pops.py ../../all_loci.fasta txn mal num coding 250 0.007 12 100000 0.000000003 1
	params:
		nameA={nameA},
		nameB={nameB},
		nameOutgroup={nameOutgroup},
		region={region},
		Lmin={Lmin},
		max_N_tolerated={max_N_tolerated},
		nMin={nMin},
		Nref={Nref},
		mu={mu},
		rho_over_theta={rho_over_theta}
	input:
		expand("{infile}", infile=infile)
	output:
		expand("ABC_{nameA}_{nameB}/ABCstat_global.txt", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/ABCstat_loci.txt", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/bpfile", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/nLoci.txt", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/{nameA}_{nameB}_infos.txt", nameA=nameA, nameB=nameB),
		expand("ABC_{nameA}_{nameB}/{nameA}_{nameB}.ms", nameA=nameA, nameB=nameB)
	threads: 8
	shell:
		"""
#		module load conda;
#		module load pypy/2.7-5.10.0;
#		module load python/2.7;
#		source activate R_env;
		fasta2ABC_2pops.py {infile} {params.nameA} {params.nameB} {params.nameOutgroup} {params.region} {params.Lmin} {params.max_N_tolerated} {params.nMin} {params.Nref} {params.mu} {params.rho_over_theta}
		"""


rule RNAseqFGT:
	params:
		nameA={nameA},
		nameB={nameB}
	input:
		infos=expand("ABC_{nameA}_{nameB}/{nameA}_{nameB}_infos.txt", nameA=nameA, nameB=nameB),
		fasta=expand("{infile}", infile=infile),
		nLoci=expand("ABC_{nameA}_{nameB}/nLoci.txt", nameA=nameA, nameB=nameB),
	output:
		expand("ABC_{nameA}_{nameB}/results_recombination.txt", nameA=nameA, nameB=nameB)
	threads: 1
	shell:	
		"""
		x=$(cat {input.infos}  | grep -v locusName | awk '{{print $2}}' | sort -n | head -n1)
		if (($x<99990)); then
			RNAseqFGT {input.fasta} {output}
		else
			echo "{input.fasta} not in correct FASTA format (line length > 100000)" > {output}
		fi
		"""


rule simulationsModelComp:
	params:
		nmultilocus={nmultilocus}
	input:
		"ABC_{nameA}_{nameB}/bpfile",
		"ABC_{nameA}_{nameB}/nLoci.txt"
	output:
		"ABC_{nameA}_{nameB}/modelComp/{model}_{i}/bpfile",
		"ABC_{nameA}_{nameB}/modelComp/{model}_{i}/priorfile.txt",
		"ABC_{nameA}_{nameB}/modelComp/{model}_{i}/ABCstat.txt"
	threads: 1
	shell:
		"""
		submit_simulations_2pop.py {params.nmultilocus} {wildcards.i} {wildcards.model} {nameA} {nameB} modelComp {wildcards.model} {config_yaml}
		"""

rule simulationsEstim:
	params:
		nmultilocus={nmultilocus}
	input:
		"ABC_{nameA}_{nameB}/bpfile",
		"ABC_{nameA}_{nameB}/nLoci.txt"
	output:
		"ABC_{nameA}_{nameB}/estim/{model}_{i}/bpfile",
		"ABC_{nameA}_{nameB}/estim/{model}_{i}/priorfile.txt",
		"ABC_{nameA}_{nameB}/estim/{model}_{i}/ABCstat.txt"
	threads: 1
	shell:
		"""
		submit_simulations_2pop.py {params.nmultilocus} {wildcards.i} {wildcards.model} {nameA} {nameB} estim  {wildcards.model} {config_yaml}
		"""


rule modelComparison:
	input:
		"ABC_{nameA}_{nameB}/estim/posterior_IM_2M_2N.txt",
		"ABC_{nameA}_{nameB}/ABCstat_global.txt",
		"ABC_{nameA}_{nameB}/ABCstat_loci.txt",
		expand("ABC_{nameA}_{nameB}/modelComp/{model}_{i}/ABCstat.txt", nameA=nameA, nameB=nameB, model=MODELS_COMP, i=ITERATIONS_MODEL_COMP)
	output:
		"ABC_{nameA}_{nameB}/modelComp/report_{nameA}_{nameB}.txt",
		"ABC_{nameA}_{nameB}/modelComp/locus_specific_modelComp.txt",
		"ABC_{nameA}_{nameB}/modelComp/best_model.txt"
	threads: nCPU_R
	shell:
		"""
#		module load conda
#		source activate R_env
		model_comp_2pop_allModels.R nameA={nameA} nameB={nameB} nMin={nMin} sub_dir_sim=modelComp nSubdir={nIterations_model_comp} ntree={ntree} ncores={nCPU_R} outgroup={outgroup}
		"""

rule estimation:
	input:
		"ABC_{nameA}_{nameB}/ABCstat_global.txt",
		expand("ABC_{nameA}_{nameB}/estim/{model}_{i}/ABCstat.txt", nameA=nameA, nameB=nameB, model=MODELS_ESTIM, i=ITERATIONS_ESTIMATES)
	output:
		"ABC_{nameA}_{nameB}/estim/report_{nameA}_{nameB}.txt",
		"ABC_{nameA}_{nameB}/estim/posterior_IM_2M_2N.txt",
		"ABC_{nameA}_{nameB}/estim/posterior_IM_2M_2N.pdf"
	threads: nCPU_R
	shell:
		"""
		estimates_2pop.R Nref={Nref} nameA={nameA} nameB={nameB} nMin={nMin} sub_dir_sim=estim nSubdir={nIterations_estim} ntree={ntree} ncores={nCPU_R} outgroup={outgroup}
		"""


rule simulation_best_model:
	params:
		nmultilocus={nmultilocus}
	input:
		best="ABC_{nameA}_{nameB}/modelComp/best_model.txt",
		bpfile="ABC_{nameA}_{nameB}/bpfile",
		nLoci="ABC_{nameA}_{nameB}/nLoci.txt"
	output:
		"ABC_{nameA}_{nameB}/best_model/best_model_{i}/priorfile.txt",
		"ABC_{nameA}_{nameB}/best_model/best_model_{i}/ABCstat.txt"
	threads: 1
	shell:
		"""
		best_model=$(cat {input.best})
		submit_simulations_2pop.py {params.nmultilocus} {wildcards.i} ${{best_model}} {nameA} {nameB} best_model best_model {config_yaml}
		"""


rule estimation_best_model:
	input:
		best="ABC_{nameA}_{nameB}/modelComp/best_model.txt",
		obs="ABC_{nameA}_{nameB}/ABCstat_global.txt",
		simulations=expand("ABC_{nameA}_{nameB}/best_model/best_model_{i}/ABCstat.txt", nameA=nameA, nameB=nameB, i=ITERATIONS_ESTIMATES)
	output:
		"ABC_{nameA}_{nameB}/best_model/report_{nameA}_{nameB}.txt",
		"ABC_{nameA}_{nameB}/best_model/posterior_bestModel.txt",
		"ABC_{nameA}_{nameB}/best_model/posterior_bestModel.pdf"
	threads: nCPU_R
	shell:
		"""
		best_model=$(cat {input.best})
		estimates_2pop_best.R Nref={Nref} nameA={nameA} nameB={nameB} nMin={nMin} sub_dir_sim=best_model nSubdir={nIterations_estim} ntree={ntree} ncores={nCPU_R} outgroup={outgroup} bestModel=${{best_model}}
		"""


rule simulation_gof:
	params:
		nmultilocus={nmultilocus}
	input:
		best="ABC_{nameA}_{nameB}/modelComp/best_model.txt",
		posterior="ABC_{nameA}_{nameB}/best_model/posterior_bestModel.txt"
	output:
		"ABC_{nameA}_{nameB}/gof/gof_{i}/ABCstat.txt"
	shell:
		"""
		best_model=$(cat {input.best})
		submit_simulations_gof_2pop.py {params.nmultilocus} {wildcards.i} ${{best_model}} {nameA} {nameB} gof gof ${{PWD}}/{input.posterior}
		"""


rule gof:
	input:
		expand("ABC_{nameA}_{nameB}/gof/gof_{i}/ABCstat.txt", nameA=nameA, nameB=nameB, i=ITERATIONS_GOF)
	output:
		"ABC_{nameA}_{nameB}/gof/goodness_of_fit_test.txt"
	shell:
		"""
		head -n1 ABC_{nameA}_{nameB}/gof/gof_0/ABCstat.txt > ABC_{nameA}_{nameB}/gof/simulations.txt
		cat ABC_{nameA}_{nameB}/gof/gof*/ABCstat.txt | grep -v avg >> ABC_{nameA}_{nameB}/gof/simulations.txt
		gof_2pop.R nameA={nameA} nameB={nameB}
		"""

